// Code generated by MockGen. DO NOT EDIT.
// Source: ./apiLogger.go

// Package mock_traceability is a generated GoMock package.
package mock_traceability

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockApiLogger is a mock of ApiLogger interface.
type MockApiLogger struct {
	ctrl     *gomock.Controller
	recorder *MockApiLoggerMockRecorder
}

// MockApiLoggerMockRecorder is the mock recorder for MockApiLogger.
type MockApiLoggerMockRecorder struct {
	mock *MockApiLogger
}

// NewMockApiLogger creates a new mock instance.
func NewMockApiLogger(ctrl *gomock.Controller) *MockApiLogger {
	mock := &MockApiLogger{ctrl: ctrl}
	mock.recorder = &MockApiLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiLogger) EXPECT() *MockApiLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockApiLogger) Error(ctx *gin.Context, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", ctx, message)
}

// Error indicates an expected call of Error.
func (mr *MockApiLoggerMockRecorder) Error(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockApiLogger)(nil).Error), ctx, message)
}

// Info mocks base method.
func (m *MockApiLogger) Info(ctx *gin.Context, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", ctx, message)
}

// Info indicates an expected call of Info.
func (mr *MockApiLoggerMockRecorder) Info(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockApiLogger)(nil).Info), ctx, message)
}
