// Code generated by MockGen. DO NOT EDIT.
// Source: ./auditRepository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	entities "storage/internal/domain/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockAuditRepository is a mock of AuditRepository interface.
type MockAuditRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuditRepositoryMockRecorder
}

// MockAuditRepositoryMockRecorder is the mock recorder for MockAuditRepository.
type MockAuditRepositoryMockRecorder struct {
	mock *MockAuditRepository
}

// NewMockAuditRepository creates a new mock instance.
func NewMockAuditRepository(ctrl *gomock.Controller) *MockAuditRepository {
	mock := &MockAuditRepository{ctrl: ctrl}
	mock.recorder = &MockAuditRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditRepository) EXPECT() *MockAuditRepositoryMockRecorder {
	return m.recorder
}

// GetLogs mocks base method.
func (m *MockAuditRepository) GetLogs() ([]entities.Audit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs")
	ret0, _ := ret[0].([]entities.Audit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockAuditRepositoryMockRecorder) GetLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockAuditRepository)(nil).GetLogs))
}

// SaveLog mocks base method.
func (m *MockAuditRepository) SaveLog(requestID, entity, msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveLog", requestID, entity, msg)
}

// SaveLog indicates an expected call of SaveLog.
func (mr *MockAuditRepositoryMockRecorder) SaveLog(requestID, entity, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLog", reflect.TypeOf((*MockAuditRepository)(nil).SaveLog), requestID, entity, msg)
}
