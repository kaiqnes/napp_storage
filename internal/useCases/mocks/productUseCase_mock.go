// Code generated by MockGen. DO NOT EDIT.
// Source: ./productUseCase.go

// Package mock_useCases is a generated GoMock package.
package mock_useCases

import (
	reflect "reflect"
	entities "storage/internal/domain/entities"
	errorx "storage/internal/frameworks/errorx"
	dto "storage/internal/interfaceAdapters/dto"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockProductUseCase is a mock of ProductUseCase interface.
type MockProductUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockProductUseCaseMockRecorder
}

// MockProductUseCaseMockRecorder is the mock recorder for MockProductUseCase.
type MockProductUseCaseMockRecorder struct {
	mock *MockProductUseCase
}

// NewMockProductUseCase creates a new mock instance.
func NewMockProductUseCase(ctrl *gomock.Controller) *MockProductUseCase {
	mock := &MockProductUseCase{ctrl: ctrl}
	mock.recorder = &MockProductUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUseCase) EXPECT() *MockProductUseCaseMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductUseCase) CreateProduct(ctx *gin.Context, productDto dto.ProductInputDto) (entities.Product, errorx.Errorx) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, productDto)
	ret0, _ := ret[0].(entities.Product)
	ret1, _ := ret[1].(errorx.Errorx)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductUseCaseMockRecorder) CreateProduct(ctx, productDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductUseCase)(nil).CreateProduct), ctx, productDto)
}

// DeleteProduct mocks base method.
func (m *MockProductUseCase) DeleteProduct(ctx *gin.Context, code string) errorx.Errorx {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, code)
	ret0, _ := ret[0].(errorx.Errorx)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductUseCaseMockRecorder) DeleteProduct(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductUseCase)(nil).DeleteProduct), ctx, code)
}

// GetProduct mocks base method.
func (m *MockProductUseCase) GetProduct(ctx *gin.Context, code string) (entities.Product, errorx.Errorx) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, code)
	ret0, _ := ret[0].(entities.Product)
	ret1, _ := ret[1].(errorx.Errorx)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductUseCaseMockRecorder) GetProduct(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductUseCase)(nil).GetProduct), ctx, code)
}

// GetProducts mocks base method.
func (m *MockProductUseCase) GetProducts(ctx *gin.Context, filterParam string, limit, offset int) ([]entities.Product, errorx.Errorx) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", ctx, filterParam, limit, offset)
	ret0, _ := ret[0].([]entities.Product)
	ret1, _ := ret[1].(errorx.Errorx)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductUseCaseMockRecorder) GetProducts(ctx, filterParam, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductUseCase)(nil).GetProducts), ctx, filterParam, limit, offset)
}

// UpdateProduct mocks base method.
func (m *MockProductUseCase) UpdateProduct(ctx *gin.Context, code string, productDto dto.ProductInputDto) (entities.Product, errorx.Errorx) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, code, productDto)
	ret0, _ := ret[0].(entities.Product)
	ret1, _ := ret[1].(errorx.Errorx)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductUseCaseMockRecorder) UpdateProduct(ctx, code, productDto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductUseCase)(nil).UpdateProduct), ctx, code, productDto)
}
