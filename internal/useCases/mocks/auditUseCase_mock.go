// Code generated by MockGen. DO NOT EDIT.
// Source: ./auditUseCase.go

// Package mock_useCases is a generated GoMock package.
package mock_useCases

import (
	reflect "reflect"
	entities "storage/internal/domain/entities"
	errorx "storage/internal/frameworks/errorx"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockAuditUseCase is a mock of AuditUseCase interface.
type MockAuditUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAuditUseCaseMockRecorder
}

// MockAuditUseCaseMockRecorder is the mock recorder for MockAuditUseCase.
type MockAuditUseCaseMockRecorder struct {
	mock *MockAuditUseCase
}

// NewMockAuditUseCase creates a new mock instance.
func NewMockAuditUseCase(ctrl *gomock.Controller) *MockAuditUseCase {
	mock := &MockAuditUseCase{ctrl: ctrl}
	mock.recorder = &MockAuditUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditUseCase) EXPECT() *MockAuditUseCaseMockRecorder {
	return m.recorder
}

// GetLogs mocks base method.
func (m *MockAuditUseCase) GetLogs(ctx *gin.Context) ([]entities.Audit, errorx.Errorx) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", ctx)
	ret0, _ := ret[0].([]entities.Audit)
	ret1, _ := ret[1].(errorx.Errorx)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockAuditUseCaseMockRecorder) GetLogs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockAuditUseCase)(nil).GetLogs), ctx)
}
